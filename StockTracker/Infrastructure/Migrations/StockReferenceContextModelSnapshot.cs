// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StockTracker.Infrastructure;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(StockReferenceContext))]
    partial class StockReferenceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("StockTracker.Reddit.Entities.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .HasColumnType("TEXT");

                    b.Property<string>("Body")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PostID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("RedditCreatedOnUtc")
                        .HasColumnType("REAL");

                    b.Property<string>("RedditID")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("SavedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("CommentID");

                    b.HasIndex("PostID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("StockTracker.Reddit.Entities.Post", b =>
                {
                    b.Property<int>("PostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .HasColumnType("TEXT");

                    b.Property<string>("Permalink")
                        .HasColumnType("TEXT");

                    b.Property<double>("RedditCreatedOnUtc")
                        .HasColumnType("REAL");

                    b.Property<string>("RedditID")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("SavedOn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SubredditID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("PostID");

                    b.HasIndex("SubredditID");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("StockTracker.Reddit.Entities.Subreddit", b =>
                {
                    b.Property<int>("SubredditID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Permalink")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("SavedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("SubredditID");

                    b.ToTable("Subreddits");
                });

            modelBuilder.Entity("StockTracker.Stocks.Entities.Stock", b =>
                {
                    b.Property<int>("StockID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Industry")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("SavedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .HasColumnType("TEXT");

                    b.HasKey("StockID");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("StockTracker.Stocks.Entities.StockReference", b =>
                {
                    b.Property<int>("StockReferenceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CommentID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StockID")
                        .HasColumnType("INTEGER");

                    b.HasKey("StockReferenceID");

                    b.HasIndex("CommentID");

                    b.HasIndex("StockID");

                    b.ToTable("StockReferences");
                });

            modelBuilder.Entity("StockTracker.Reddit.Entities.Comment", b =>
                {
                    b.HasOne("StockTracker.Reddit.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostID");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("StockTracker.Reddit.Entities.Post", b =>
                {
                    b.HasOne("StockTracker.Reddit.Entities.Subreddit", "Subreddit")
                        .WithMany("Posts")
                        .HasForeignKey("SubredditID");

                    b.Navigation("Subreddit");
                });

            modelBuilder.Entity("StockTracker.Stocks.Entities.StockReference", b =>
                {
                    b.HasOne("StockTracker.Reddit.Entities.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentID");

                    b.HasOne("StockTracker.Stocks.Entities.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockID");

                    b.Navigation("Comment");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("StockTracker.Reddit.Entities.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("StockTracker.Reddit.Entities.Subreddit", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
